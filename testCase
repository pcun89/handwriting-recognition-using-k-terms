import numpy as np
import pytest
from sklearn import datasets
from sklearn.cluster import KMeans

# Load dataset once for all tests
digits = datasets.load_digits()
X = digits.data
y = digits.target

# ----- Fixtures -----

@pytest.fixture
def kmeans_model():
    model = KMeans(n_clusters=10, random_state=3)
    model.fit(X)
    return model

@pytest.fixture
def new_samples():
    return np.array([
        np.zeros(64),
        np.random.rand(64) * 8,
        np.linspace(0, 8, 64),
        np.array(digits.data[123])  # Use known sample
    ])

# ----- Tests -----

def test_model_training(kmeans_model):
    # Check model trained and cluster centers exist
    assert kmeans_model.cluster_centers_.shape == (10, 64), "Each cluster center should have 64 features"
    assert hasattr(kmeans_model, 'labels_'), "Model should have labels after fitting"

def test_predict_new_samples(kmeans_model, new_samples):
    labels = kmeans_model.predict(new_samples)
    assert len(labels) == 4, "Should return 4 predictions"
    assert all(0 <= label < 10 for label in labels), "Cluster labels should be between 0 and 9"

def test_cluster_center_image_reshaping(kmeans_model):
    for center in kmeans_model.cluster_centers_:
        reshaped = center.reshape((8, 8))
        assert reshaped.shape == (8, 8), "Each center should reshape to 8x8 image"

